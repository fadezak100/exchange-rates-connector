import VError from 'verror';
import { AirbyteLogger } from '../logger';
import { AirbyteCatalogMessage, AirbyteConfig, AirbyteConfiguredCatalog, AirbyteConnectionStatusMessage, AirbyteMessage, AirbyteState } from '../protocol';
import { AirbyteSource } from './source';
import { AirbyteStreamBase } from './streams/stream-base';
/**
 * Airbyte Source base class providing additional boilerplate around the Check
 * and Discover commands, and the logic for processing the Source's streams. The
 * user needs to implement the spec() and checkConnection() methods and the
 * streams.
 */
export declare abstract class AirbyteSourceBase<Config extends AirbyteConfig> extends AirbyteSource<Config> {
    protected readonly logger: AirbyteLogger;
    constructor(logger: AirbyteLogger);
    /**
     * Validates the provided configuration by testing the configuration values
     * against the source's technical system.
     * @param config The user-provided configuration as specified by the source's
     * spec. This usually contains information required to check connection e.g.
     * tokens, secrets and keys etc.
     * @return A tuple of (boolean, VError). If boolean is true, then the
     * connection check is successful and we can connect to the underlying data
     * source using the provided configuration. Otherwise, the input config cannot
     * be used to connect to the underlying data source, and the VError should
     * describe what went wrong. The VError message will be displayed to the user.
     */
    abstract checkConnection(config: Config): Promise<[boolean, VError | undefined]>;
    /**
     * Implements the streams of this source, for creating the source catalog
     * and processing records from the source's technical system.
     * @param config The user-provided configuration as specified by the source's
     * spec. Any stream construction related operation should happen here.
     * @return A list of the streams in this source connector.
     */
    abstract streams(config: Config): AirbyteStreamBase[];
    /**
     * Source name
     */
    get name(): string;
    /**
     * Implements the Discover operation from the Airbyte Specification. See
     * https://docs.airbyte.io/architecture/airbyte-specification.
     */
    discover(config: Config): Promise<AirbyteCatalogMessage>;
    /**
     * Implements the Check Connection operation from the Airbyte Specification.
     * See https://docs.airbyte.io/architecture/airbyte-specification.
     */
    check(config: Config): Promise<AirbyteConnectionStatusMessage>;
    /**
     * Implements the Read operation from the Airbyte Specification. See
     * https://docs.airbyte.io/architecture/airbyte-specification.
     */
    read(config: Config, catalog: AirbyteConfiguredCatalog, state?: AirbyteState): AsyncGenerator<AirbyteMessage>;
    private readStream;
    private readIncremental;
    private readFullRefresh;
    private checkpointState;
}
