"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapApiError = void 0;
const stream_1 = __importDefault(require("stream"));
const verror_1 = require("verror");
function formatMessageData(data) {
    return data instanceof stream_1.default.Readable ? '[Stream]' : data;
}
function formatRequest(req) {
    return {
        baseUrl: req === null || req === void 0 ? void 0 : req.baseURL,
        url: req === null || req === void 0 ? void 0 : req.url,
        method: req === null || req === void 0 ? void 0 : req.method,
        params: req === null || req === void 0 ? void 0 : req.params,
    };
}
function formatResponse(res) {
    return {
        status: res.status,
        headers: res.headers,
        data: formatMessageData(res.data),
    };
}
function isAxiosError(error) {
    return error.isAxiosError;
}
/** Strips verbose properties that libraries like Axios attach to errors */
function wrapApiError(error, message) {
    var _a;
    if (!isAxiosError(error)) {
        const cause = verror_1.VError.cause(error);
        if (cause) {
            // Wrap the cause recursively since it could contain an Axios error
            error = new verror_1.WError(wrapApiError(cause), error.message);
        }
        return message ? new verror_1.WError(error, message) : error;
    }
    const prefix = message ? `${message}: ` : '';
    const res = error.response;
    const info = {
        req: error.request
            ? formatRequest({ ...error.config, ...error.request })
            : formatRequest(error.config),
        res: res ? formatResponse(res) : undefined,
    };
    if (!res) {
        return new verror_1.VError({ info }, '%sAPI request failed: %s', prefix, error.message);
    }
    const { data, status } = res;
    let msg = `${prefix}API responded with status ${status}`;
    const causeMsg = typeof data == 'string' ? data : (_a = data === null || data === void 0 ? void 0 : data.error) === null || _a === void 0 ? void 0 : _a.message;
    if (causeMsg) {
        msg += `: ${causeMsg}`;
    }
    return new verror_1.VError({ info }, msg);
}
exports.wrapApiError = wrapApiError;
//# sourceMappingURL=errors.js.map