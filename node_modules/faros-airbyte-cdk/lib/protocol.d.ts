import { Dictionary } from 'ts-essentials';
export declare enum AirbyteLogLevel {
    FATAL = "FATAL",
    ERROR = "ERROR",
    WARN = "WARN",
    INFO = "INFO",
    DEBUG = "DEBUG",
    TRACE = "TRACE"
}
export declare function AirbyteLogLevelOrder(level: AirbyteLogLevel): number;
export declare enum AirbyteMessageType {
    CATALOG = "CATALOG",
    CONNECTION_STATUS = "CONNECTION_STATUS",
    LOG = "LOG",
    RECORD = "RECORD",
    SPEC = "SPEC",
    STATE = "STATE",
    TRACE = "TRACE"
}
export declare enum AirbyteConnectionStatus {
    SUCCEEDED = "SUCCEEDED",
    FAILED = "FAILED"
}
export declare enum AirbyteTraceFailureType {
    SYSTEM_ERROR = "system_error",
    CONFIG_ERROR = "config_error"
}
export interface AirbyteConfig {
}
export declare function parseAirbyteMessage(s: string): AirbyteMessage;
export interface AirbyteMessage {
    readonly type: AirbyteMessageType;
}
export declare enum SyncMode {
    FULL_REFRESH = "full_refresh",
    INCREMENTAL = "incremental"
}
export declare enum DestinationSyncMode {
    APPEND = "append",
    OVERWRITE = "overwrite",
    APPEND_DEDUP = "append_dedup"
}
export interface AirbyteStream {
    name: string;
    json_schema: Dictionary<any>;
    supported_sync_modes?: SyncMode[];
    source_defined_cursor?: boolean;
    default_cursor_field?: string[];
    source_defined_primary_key?: string[][];
    namespace?: string;
}
export interface AirbyteCatalog {
    streams: AirbyteStream[];
}
export declare class AirbyteCatalogMessage implements AirbyteMessage {
    readonly catalog: AirbyteCatalog;
    readonly type: AirbyteMessageType;
    constructor(catalog: AirbyteCatalog);
}
export interface AirbyteConfiguredStream {
    stream: AirbyteStream;
    sync_mode: SyncMode;
    cursor_field?: string[];
    destination_sync_mode?: DestinationSyncMode;
    primary_key?: string[][];
}
export interface AirbyteConfiguredCatalog {
    streams: AirbyteConfiguredStream[];
}
export declare class AirbyteConnectionStatusMessage implements AirbyteMessage {
    readonly connectionStatus: {
        status: AirbyteConnectionStatus;
        message?: string;
    };
    readonly type: AirbyteMessageType;
    constructor(connectionStatus: {
        status: AirbyteConnectionStatus;
        message?: string;
    });
}
export declare class AirbyteLog implements AirbyteMessage {
    readonly log: {
        level: AirbyteLogLevel;
        message: string;
        stack_trace: string;
    };
    readonly type: AirbyteMessageType;
    constructor(log: {
        level: AirbyteLogLevel;
        message: string;
        stack_trace: string;
    });
    static make(level: AirbyteLogLevel, message: string, stack_trace?: string): AirbyteLog;
}
export declare const AirbyteRawStreamPrefix = "_airbyte_raw_";
export declare const AirbyteRawABId = "_airbyte_ab_id";
export declare const AirbyteRawEmittedAt = "_airbyte_emitted_at";
export declare const AirbyteRawData = "_airbyte_data";
export declare class AirbyteRecord implements AirbyteMessage {
    readonly record: {
        stream: string;
        namespace?: string;
        emitted_at: number;
        data: Dictionary<any>;
    };
    readonly type: AirbyteMessageType;
    constructor(record: {
        stream: string;
        namespace?: string;
        emitted_at: number;
        data: Dictionary<any>;
    });
    isRaw(): boolean;
    unpackRaw(): AirbyteRecord;
    static make(stream: string, data: Dictionary<any>, namespace?: string): AirbyteRecord;
}
export interface AirbyteTraceError {
    type: 'ERROR';
    emitted_at: number;
    error: {
        message: string;
        internal_message?: string;
        stack_trace?: string;
        failure_type?: AirbyteTraceFailureType;
    };
}
export declare class AirbyteTrace implements AirbyteMessage {
    readonly trace: {
        type: 'ERROR';
        emitted_at: number;
        error: {
            message: string;
            internal_message?: string;
            stack_trace?: string;
            failure_type?: AirbyteTraceFailureType;
        };
    };
    readonly type: AirbyteMessageType;
    constructor(trace: {
        type: 'ERROR';
        emitted_at: number;
        error: {
            message: string;
            internal_message?: string;
            stack_trace?: string;
            failure_type?: AirbyteTraceFailureType;
        };
    });
    static make(err: any, failure_type?: AirbyteTraceFailureType): AirbyteTrace;
}
export interface Spec {
    documentationUrl?: string;
    changelogUrl?: string;
    connectionSpecification: Dictionary<any>;
    supportsIncremental?: boolean;
    supportsNormalization?: boolean;
    supportsDBT?: boolean;
    supported_destination_sync_modes?: DestinationSyncMode[];
}
export declare class AirbyteSpec implements AirbyteMessage {
    readonly spec: Spec;
    readonly type: AirbyteMessageType;
    constructor(spec: Spec);
}
export interface AirbyteState {
    [stream: string]: any;
}
export declare class AirbyteStateMessage implements AirbyteMessage {
    readonly state: {
        data: AirbyteState;
    };
    readonly type: AirbyteMessageType;
    constructor(state: {
        data: AirbyteState;
    });
}
